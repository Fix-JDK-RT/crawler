Аббревиатура API означает Application Programming Interface (программный интерфейс приложения). Это, как следует из названия, интерфейс, с помощью которого взаимодействуют стороны обмена.В этой статье вы познакомитесь с основами разработки API с применением стандарта GraphQL.GraphQL — язык запросов с открытым исходным кодом, разработанный Facebook. Он создавался как более эффективная альтернатива REST для разработки и использования программных интерфейсов приложений.GraphQL обладает множеством достоинств, например:Для того, чтобы понять, как применять стандарт на практике, мы будем использовать сервер в базовой конфигурации — Graphpack.Для начала нужно создать новую папку для проекта. В данном случае имя папки будет graphql-server, однако название не принципиально.Откройте терминал и введите:На вашем компьютере должен быть установлен npm или yarn.Перейдите в созданную вами папку, если вы ещё этого не сделали и введите команду в зависимости от используемого менеджера:илиnpm создаст файл package.json, в котором будут храниться все созданные вами зависимости и команды.Теперь необходимо установить одну зависимость, которую мы будем использовать в рамках этой статьи.Graphpack позволяет создать сервер GraphQL с базовой конфигурацией. Эта функция позволит продолжить работу, не тратя времени на настройку.Используя терминал, в корневой папке проекта установите Graphpack с помощью следующей команды:Или, если вы используете yarn:После установки Graphpack перейдите к файлу package.json и добавьте следующий код:Создайте на сервере папку src. В данном примере это будет единственная папка на сервере, в которой необходимо будет создать три файла.В папке src создайте файл schema.graphql. В этот файл добавьте код:В этом файле будет находиться вся схема GraphQL.Создайте второй файл в той же папке, назовите его resolvers.js. Разместите там следующий код:В этом файле будут размещены инструкции по выполнению операций GraphQL.Создайте третий файл, db.js, содержащий код:Для обучения работе с GraphQL нет нужды использовать настоящие данные. Этот файл нужен для симуляции обращений к базе данных.После выполнения операций папка src должна выглядеть следующим образом:Теперь необходимо выполнить команду npm run dev для npm или yarn dev для yarn. Терминал должен вывести информацию об успешном запуске сервера:Теперь можно перейти к localhost:4000. Система готова к работе над API на основе GraphQL. Для разработки используется IDE GraphQL Playground.Для создания схем в GraphQL используется собственный язык Schema Definition Language (SDL). SDL обладает интуитивно понятным синтаксисом и универсален для любой используемой технологии.Типы — одна из основных особенностей GraphQL. Это кастомные объекты, которые определяют, как будет выглядеть API. Например, при разработке программного интерфейса для приложения, взаимодействующего с соцсетями, в API стоит объявить типы Posts, Users, Likes, Groups.В типах есть поля, возвращающие определённые разновидности данных. Например, при создании типа User, в него стоит включить поля name, email, и age. Поля типов могут быть любыми и всегда возвращают данные в формате Int, Float, String, Boolean, ID, List of Object Types, или Custom Objects Types.Чтобы создать первый тип, откройте файл schema.graphql и замените ранее прописанный там тип Query следующим кодом:Каждая запись типа User должна иметь идентификационный номер, поэтому поле id содержит данные соответствующего типа. Поля name и email содержат String (переменную типа строки символов), а age — целочисленную переменную.Восклицательный знак в конце определения поля означает, что это поле не может быть пустым. Единственное поле без восклицательного знака — age.GraphQL оперирует тремя основными концепциями:Откройте файл schema.graphql и добавьте тип Query:Запрос users будет возвращать массив из одной и более записей типа User. Поскольку в определении использованы восклицательные знаки, ответ на запрос не может быть пустым.Для получения конкретной записи User необходимо создать соответствующий запрос. В данном случает это будет запрос user в типе Query. Добавьте в код следующую строку:Теперь код должен выглядеть так:Как видите, в запросах GraphQL можно передавать аргументы. В данном случае для получения конкретной записи в запросе в качестве аргумента используется её поле id.Местонахождение данных, которые будут обрабатываться в соответствии с запросом, определяется в файле resolvers.js. Откройте этот файл и импортируйте учебную базу данных db.js:Затем замените функцию hello на user и users:В каждом резолвере запроса есть четыре аргумента. В запросе user в качестве аргумента передаётся содержимое поля id записи базы данных. Сервер возвращает содержимое подходящей записи. Запрос users не содержит аргументов и всегда возвращает весь массив целиком.Для тестирования получившегося кода перейдите к localhost:4000.Следующий код должен вернуть список всех записей db.js:Получить первую запись из базы можно с помощью этого кода:В GraphQL изменения — способ модифицировать данные на сервере и получить обработанную информацию. Этот процесс можно рассматривать как аналогичный концепции CUD (Create, Update, Delete) в стандарте REST.Для создания изменения откройте файл schema.graphqlи добавьте новый тип mutation:В данном случае указано три различных изменения:Теперь откройте файл resolvers.js и ниже объекта Query создайте новый объект mutation:Полный код файла resolvers.js должен выглядеть так:Сделайте запрос к localhost:4000:Он должен вернуть новую запись типа User. Опробуйте также остальные функции изменения.Как упоминалось ранее, с помощью подписок поддерживается постоянная связь между клиентами и сервером. Базовая подписка выглядит следующим образом:Несмотря на то что этот код выглядит похожим на запрос, работает он несколько иначе. При обновлении данных сервер выполняет определённый в подписке запрос GraphQL и рассылает обновлённые данные клиентам. Более подробно о работе с подписками можно почитать в этом материале.Стандарт GarphQL набирает популярность. В рамках опроса State of JavaScript, проведённого среди JS-разработчиков, более половины респондентов указали, что слышали об этой технологии и хотели бы с ней ознакомиться, а пятая часть уже её использует и не намерена отказываться. Если верить этому тренду, GraphQL ожидает активное развитие. Надеемся, что данный материал дал вам общее представление о GraphQL и заинтересовал в дальнейшем его изучении.Перевод статьи A Beginner’s Guide to GraphQLСергей ШтукатуровЗагрузка...Только самые важные IT-новостиВы успешно подтвердили свою подписку на «Аргументы и функции».Ждите первое письмо, оно придёт уже совсем скоро!«Аргументы и функции» — обзор самого важного из мира разработки. Даже не нужно переходить по ссылкам, просто прочитать одно письмо. Присылаем каждый день, по вечерам.Выглядит это примерно так: